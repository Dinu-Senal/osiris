@page "/projects/{UserRole}/{UserId}/project-view/{ProjectId}/"
@using Osiris.Data
@inject ProjectService projectService
@inject TicketService ticketService
@inject UserService userService
@inject NavigationManager NavigationManager

@if (isLoaded.Equals(false))
{
    <LoadingSpinner />
}
else
{
    <h3>Project @projectObject.Name</h3>
    @if (UserRole.Equals("admin"))
    {
        <button type="button" class="btn-remove" @onclick="() => OnOpenProjectDeleteDialog()">Delete</button>
        <button type="button" class="btn-outlined" @onclick="() => OnOpenProjectEditDialog()">Edit</button>
    }
    <a class="btn-outlined mx-3" href="/projects/@UserRole/project-view/@projectObject.ProjectId/section-board">Section</a>
    <p>@projectObject.Description</p>
    <p>@projectObject.ProjectId</p>

    /* Getting Assigned Users for Tickets */
    <div>Project Collaborators</div>
    #region get assigned users
    var assignedUserList = new List<string>();
    foreach (var ticket in ticketListObj)
    {
        if (ticket.ProjectId.ToString().Equals(ProjectId))
        {
            assignedUserList.Add(ticket.AssignedUser);
        }
    }
    foreach (var assignedUser in assignedUserList.Distinct())
    {
        foreach (var users in userListObj)
        {
            if (users.UserId.ToString().Equals(assignedUser))
            {
                <div>@users.Name</div>
            }
        }
    }
    #endregion

    if (OpenDeleteDialog)
    {
        <ModalDeleteDialog Title="Are you sure ?"
                           Text="@projectObject.Name"
                           ButtonName="Delete"
                           OnClose="@DeleteProject" />
    }
    if (OpenUpdateDialog)
    {
        <ProjectUpdate OnClose="@(UpdateProject)" RetrievedData="@projectObject.ProjectId.ToString()" />
    }
}

@code {
    List<Ticket> ticketListObj;
    List<User> userListObj;

    User userObject = new User();
    Project projectObject = new Project();

    [Parameter]
    public String ProjectId { get; set; }
    [Parameter]
    public String UserRole { get; set; }
    [Parameter]
    public String UserId { get; set; }

    Boolean isLoaded = false;

    private async Task loadProjectData()
    {
        projectObject = await Task.Run(() => projectService.GetProjectAsync(ProjectId));
        StateHasChanged();
    }
    private async Task loadTicketData()
    {
        ticketListObj = await Task.Run(() => ticketService.GetAllTicketsAsync());
        StateHasChanged();
    }
    private async Task loadUserData()
    {
        userListObj = await Task.Run(() => userService.GetAllUsersAsync());
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await loadProjectData();
        await loadTicketData();
        await loadUserData();
        isLoaded = true;
    }

    /* Modal Logic */

    /* Project Modal Logic */
    /* Delete Project Logic */
    public Boolean OpenDeleteDialog { get; set; }
    private void OnOpenProjectDeleteDialog()
    {
        OpenDeleteDialog = true;
        StateHasChanged();
    }
    private async Task DeleteProject(Boolean accepted)
    {
        if (accepted)
        {
            await projectService.DeleteProjectAsync(projectObject);
            NavigationManager.NavigateTo("/projects");
        }
        OpenDeleteDialog = false;
        StateHasChanged();
    }

    /* Edit Project Logic */
    public Boolean OpenUpdateDialog { get; set; }
    private void OnOpenProjectEditDialog()
    {
        OpenUpdateDialog = true;
        StateHasChanged();
    }
    private async Task UpdateProject(Boolean accepted)
    {
        if (accepted)
        {
            await loadProjectData();
        }
        OpenUpdateDialog = false;
        StateHasChanged();
    }
}
