@page "/projects/{UserRole}/{UserId}/project-view/{ProjectId}/"
@using Osiris.Data
@inject ProjectService projectService
@inject TicketService ticketService
@inject UserService userService
@inject NavigationManager NavigationManager

@if (isLoaded.Equals(false))
{
    <LoadingSpinner />
}
else
{
    <div class="container pl-0 mb-5">
        <div class="row">
            <div class="company-logo pl-3 ml-3">
                <div class="oi oi-folder h3" style="top: -15px; color: #000000" />
            </div>
            <div class="col-5" style="top: 4px">
                <div class="company-title">Project @projectObject.Name</div>
            </div>
            @if (UserRole.Equals("admin"))
            {
                <div class="col-1" style="max-width:none; top: 9px">
                    <button class="button btn-main" style="height: 35px; width: max-content" @onclick="() => OnOpenProjectEditDialog()">
                        <div class="mr-2 oi oi-pencil h7" style="color: #fff" />Edit
                    </button>
                </div>
                <div class="col-1" style="max-width: none; top: 9px">
                    <button class="btn-remove" style="height: 35px; width: max-content" @onclick="() => OnOpenProjectDeleteDialog()">
                        <div class="mr-2 oi oi-trash h7" style="color: #fff" />Delete
                    </button>
                </div>
            }
            <div class="col-1" style="max-width: none; top: 9px">
                <a class="btn-outlined mx-3" href="/projects/@UserRole/@UserId/project-view/@projectObject.ProjectId/section-board">Section</a>
            </div>
        </div>
    </div>

    /* Getting Assigned Users for Tickets */
    #region get assigned users
    var assignedUserList = new List<string>();
    foreach (var ticket in ticketListObj)
    {
        if (ticket.ProjectId.ToString().Equals(ProjectId))
        {
            assignedUserList.Add(ticket.AssignedUser);
        }
    }
    #endregion

    <div class="row">
        <div class="col-8">
            <div class="osiris-prediction-card">
                <div class="row mb-4">
                    <div class="col-6">
                        <h5 class="mb-4">Project Collaborators</h5>
                    </div>
                </div>
                <div class="company-users-card">
                    @foreach (var assignedUser in assignedUserList.Distinct())
                    {
                        foreach (var users in userListObj)
                        {
                            if (users.UserId.ToString().Equals(assignedUser))
                            {
                                <div class="company-users-secondary-card my-4">
                                    <div class="row">
                                        <div class="col-10">Name : @users.Name</div>
                                    </div>
                                    <div>Email: @users.Email</div>
                                </div>
                            }
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col">
            <div class="osiris-prediction-card">
                <h5 class="mb-4">Project Description</h5>
                <p style="word-break: break-word">@projectObject.Description</p>
            </div>
        </div>
    </div>

    if (OpenDeleteDialog)
    {
        <ModalDeleteDialog Title="Are you sure ?"
                           Text="@projectObject.Name"
                           ButtonName="Delete"
                           OnClose="@DeleteProject" />
    }
    if (OpenUpdateDialog)
    {
        <ProjectUpdate OnClose="@(UpdateProject)" RetrievedData="@projectObject.ProjectId.ToString()" />
    }
}

@code {
    List<Ticket> ticketListObj;
    List<User> userListObj;

    User userObject = new User();
    Project projectObject = new Project();

    [Parameter]
    public String ProjectId { get; set; }
    [Parameter]
    public String UserRole { get; set; }
    [Parameter]
    public String UserId { get; set; }

    Boolean isLoaded = false;

    private async Task loadProjectData()
    {
        projectObject = await Task.Run(() => projectService.GetProjectAsync(ProjectId));
        StateHasChanged();
    }
    private async Task loadTicketData()
    {
        ticketListObj = await Task.Run(() => ticketService.GetAllTicketsAsync());
        StateHasChanged();
    }
    private async Task loadUserData()
    {
        userListObj = await Task.Run(() => userService.GetAllUsersAsync());
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await loadProjectData();
        await loadTicketData();
        await loadUserData();
        isLoaded = true;
    }

    /* Modal Logic */

    /* Project Modal Logic */
    /* Delete Project Logic */
    public Boolean OpenDeleteDialog { get; set; }
    private void OnOpenProjectDeleteDialog()
    {
        OpenDeleteDialog = true;
        StateHasChanged();
    }
    private async Task DeleteProject(Boolean accepted)
    {
        if (accepted)
        {
            await projectService.DeleteProjectAsync(projectObject);
            NavigationManager.NavigateTo($"/projects/{UserRole}/{UserId}");
        }
        OpenDeleteDialog = false;
        StateHasChanged();
    }

    /* Edit Project Logic */
    public Boolean OpenUpdateDialog { get; set; }
    private void OnOpenProjectEditDialog()
    {
        OpenUpdateDialog = true;
        StateHasChanged();
    }
    private async Task UpdateProject(Boolean accepted)
    {
        if (accepted)
        {
            await loadProjectData();
        }
        OpenUpdateDialog = false;
        StateHasChanged();
    }
}
