@page  "/project/project-view/{ProjectId:guid}/section-board"
@using Osiris.Data
@inject SectionService sectionService
@inject TicketService ticketService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject IJSRuntime jsRuntime

@if (sectionListObj is null)
{
    <LoadingSpinner />
}
else
{
    <div class="section-title">
        <h3 class="mr-3">Manage Your Tickets</h3>
        <button type="button" class="button btn-main mb-3" @onclick="() => OnOpenSectionAddDialog(true)">Add Section</button>
    </div>
    <div class="scrollmenu">
        @foreach (var sect in sectionListObj)
        {
            if (sect.ProjectId == ProjectId)
            {
                <div class="section">
                    <div class="osiris-section-card mt-3 mr-3">
                        <div class="container">
                            <div class="row mb-3">
                                <div class="col-6 p-0">@sect.Name</div>
                                <div class="col-2 oi oi-plus" @onclick="() => OnOpenTicketAddDialog(sect.SectionId)"></div>
                                <div class="col-2 oi oi-pencil" @onclick="() => OnOpenSectionEditDialog(sect.SectionId)"></div>
                                <div class="col-2 oi oi-delete" @onclick="() => OnOpenSectionDeleteDialog(sect.SectionId)"></div>
                            </div>
                        </div>
                        @if (ticketListObj is null)
                        {
                            <div>empty</div>
                        }
                        else
                        {
                            <div class="ticket-container">
                                @foreach (var tick in ticketListObj)
                                {

                                    if (sect.SectionId == tick.SectionId)
                                    {
                                        <div class="ticket mb-2">
                                            <div class="container">
                                                <div class="row">
                                                    @if (tick.Status == "Complete")
                                                    {
                                                        <div class="oi oi-circle-check"  style="color: #16C79A" />
                                                    }
                                                    else
                                                    {
                                                        <div class="oi oi-circle-check" />
                                                    }
                                                    <div class="col-6 ticket-title">@tick.Name</div>
                                                    <div class="col-1 oi oi-external-link mr-2" @onclick="() => OnOpenTicketEditDialog(tick.TicketId)"></div>
                                                    <div class="col-1 oi oi-circle-x" @onclick="() => OnOpenTicketDeleteDialog(tick.TicketId)"></div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>

    if (OpenAddSectionDialog)
    {
        #region Create Section
        <div class="modal fade show" id="sectionCreateModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Create New Section</h4>
                    </div>

                    <EditForm Model="sectionObject" OnValidSubmit="@AddSection">
                        <div class="modal-body">
                            <DataAnnotationsValidator />

                            <div class="form-group">
                                <label for="Name" class="control-label">Name</label>
                                <InputText @bind-Value="sectionObject.Name"></InputText>
                                <ValidationMessage For="@(() => sectionObject.Name)" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="button btn-main">Create</button>
                            <button type="button" class="btn-outlined" @onclick="() => OnOpenSectionAddDialog(false)">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        #endregion
    }

    if (OpenEditSectionDialog)
    {
        #region Edit Section
        <div class="modal fade show" id="sectionUpdateModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Edit Section</h4>
                    </div>

                    <EditForm Model="sectionObject" OnValidSubmit="@EditSection">
                        <div class="modal-body">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <label for="Name" class="control-label">Name</label>
                                <InputText @bind-Value="sectionObject.Name"></InputText>
                                <ValidationMessage For="@(() => sectionObject.Name)" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="button btn-main">Edit</button>
                            <button type="button" class="btn-outlined" @onclick="() => OnCancelEditSectionDialog()">Close</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        #endregion
    }
    if (OpenDeleteSectionDialog)
    {
        #region Delete Section
        <div class="modal fade show" id="deleteSectionModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Do want to delete this section?</h4>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn-remove" @onclick="() => DeleteSection()">Delete</button>
                        <button type="button" class="btn-outlined" @onclick="() => OnCancelSectionDeleteDialog()">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        #endregion
    }
    if (OpenAddTicketDialog)
    {
        #region Add Ticket
        <div class="modal fade show" id="ticketAddModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Create New Ticket</h4>
                    </div>

                    <EditForm Model="ticketObject" OnValidSubmit="@AddTicket">
                        <div class="modal-body">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <label for="Name" class="control-label">Name</label>
                                <InputText @bind-Value="ticketObject.Name"></InputText>
                                <ValidationMessage For="@(() => ticketObject.Name)" />
                            </div>
                            <div class="form-group">
                                <label for="Description" class="control-label">Description</label>
                                <InputText @bind-Value="@ticketObject.Description"></InputText>
                            </div>
                            <div class="form-group">
                                <label for="Status" class="control-label">Status</label>
                                <InputSelect @bind-Value="@ticketObject.Status">
                                    <option value="" selected disabled hidden>Choose Status</option>
                                    <option value="Complete">Complete</option>
                                    <option value="Incomplete">Incomplete</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => ticketObject.Status)" />
                            </div>
                            <div class="form-group">
                                <label for="StartingDate" class="control-label">Starting Date</label>
                                <InputDate @bind-Value="ticketObject.StartDate"></InputDate>
                                <ValidationMessage For="@(() => ticketObject.StartDate)" />
                            </div>
                            <div class="form-group">
                                <label for="EndingDate" class="control-label">Ending Date</label>
                                <InputDate @bind-Value="ticketObject.EndDate"></InputDate>
                                <ValidationMessage For="@(() => ticketObject.EndDate)" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="button btn-main">Create</button>
                            <button type="button" class="btn-outlined" @onclick="OnCancelTicketAddDialog">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        #endregion
    }
    if (OpenEditTicketDialog)
    {
        #region Edit Ticket
        <div class="modal fade show" id="ticketEditModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Ticket Details</h4>
                    </div>
                    <EditForm Model="ticketObject" OnValidSubmit="@EditTicket">
                        <div class="modal-body">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <label for="Name" class="control-label">Name</label>
                                <InputText @bind-Value="ticketObject.Name"></InputText>
                                <ValidationMessage For="@(() => ticketObject.Name)" />
                            </div>
                            <div class="form-group">
                                <label for="Description" class="control-label">Description</label>
                                <InputText @bind-Value="@ticketObject.Description"></InputText>
                            </div>
                            <div class="form-group">
                                <label for="Status" class="control-label">Status</label>
                                <InputSelect @bind-Value="@ticketObject.Status">
                                    <option value="" selected disabled hidden>Choose Status</option>
                                    <option value="Complete">Complete</option>
                                    <option value="Incomplete">Incomplete</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => ticketObject.Status)" />
                            </div>
                            <div class="form-group">
                                <label for="StartingDate" class="control-label">Starting Date</label>
                                <InputDate @bind-Value="ticketObject.StartDate"></InputDate>
                                <ValidationMessage For="@(() => ticketObject.StartDate)" />
                            </div>
                            <div class="form-group">
                                <label for="EndingDate" class="control-label">Ending Date</label>
                                <InputDate @bind-Value="ticketObject.EndDate"></InputDate>
                                <ValidationMessage For="@(() => ticketObject.EndDate)" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="button btn-main">Confirm</button>
                            <button type="button" class="btn-outlined" @onclick="OnCancelTicketEditDialog">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
        #endregion
    }
    if (OpenDeleteTicketDialog)
    {
        #region Delete Ticket
        <div class="modal fade show" id="deleteTicketModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Do want to delete this ticket?</h4>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn-remove" @onclick="() => DeleteTicket()">Delete</button>
                        <button type="button" class="btn-outlined" @onclick="() => OnCancelTicketDeleteDialog()">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        #endregion
    }

}

@code {
    List<Section> sectionListObj;
    List<Ticket> ticketListObj;
    Section sectionObject = new Section();
    Ticket ticketObject = new Ticket();

    [Parameter]
    public Guid ProjectId { get; set; }

    private async Task loadSectionData()
    {
        sectionListObj = await Task.Run(() => sectionService.GetAllSectionsAsync());
        StateHasChanged();
    }
    private async Task loadTicketData()
    {
        ticketListObj = await Task.Run(() => ticketService.GetAllTicketsAsync());
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await loadSectionData();
        await loadTicketData();
    }

    /* Modal Logic */
    private Guid SectionId { get; set; }
    private Guid TicketId { get; set; }

    /* Section Modal Logic*/
    /* Section Add Logic */
    private Boolean OpenAddSectionDialog { get; set; }
    private async void OnOpenSectionAddDialog(Boolean opened)
    {
        OpenAddSectionDialog = opened;
        await loadSectionData();
        sectionObject = new Section();
        StateHasChanged();
    }
    private async Task AddSection()
    {
        sectionObject.ProjectId = ProjectId;
        await sectionService.AddSectionAsync(sectionObject);
        sectionObject = new Section();
        OnOpenSectionAddDialog(false);
    }

    /* Section Edit Logic */
    private Boolean OpenEditSectionDialog { get; set; }
    private void OnOpenSectionEditDialog(Guid sectionId)
    {
        OpenEditSectionDialog = true;
        sectionObject = sectionListObj.FirstOrDefault(data => data.SectionId == sectionId);
    }
    private void OnCancelEditSectionDialog()
    {
        OpenEditSectionDialog = false;
    }
    private async Task EditSection()
    {
        await sectionService.UpdateSectionAsync(sectionObject);
        OpenEditSectionDialog = false;
        ticketObject = new Ticket();
        StateHasChanged();
    }

    /* Section Delete Logic */
    private Boolean OpenDeleteSectionDialog { get; set; }
    private void OnOpenSectionDeleteDialog(Guid Id)
    {
        SectionId = Id;
        OpenDeleteSectionDialog = true;
    }
    private void OnCancelSectionDeleteDialog()
    {
        OpenDeleteSectionDialog = false;
    }
    private async Task DeleteSection()
    {
        await sectionService.DeleteSectionByIdAsync(SectionId);
        OpenDeleteSectionDialog = false;
        await loadSectionData();
        StateHasChanged();
    }

    /* Ticket Modal Logic */
    /* Ticket Add Logic */
    private Boolean OpenAddTicketDialog { get; set; }
    private void OnOpenTicketAddDialog(Guid sectionId)
    {
        SectionId = sectionId;
        OpenAddTicketDialog = true;
        ticketObject = new Ticket();
    }
    private void OnCancelTicketAddDialog()
    {
        OpenAddTicketDialog = false;
    }
    private async Task AddTicket()
    {
        ticketObject.SectionId = SectionId;
        await ticketService.AddTicketAsync(ticketObject);
        OpenAddTicketDialog = false;
        await loadTicketData();
        StateHasChanged();
    }

    /*Ticket Edit Logic */
    private Boolean OpenEditTicketDialog { get; set; }
    private void OnOpenTicketEditDialog(Guid ticketId)
    {
        OpenEditTicketDialog = true;
        ticketObject = ticketListObj.FirstOrDefault(data => data.TicketId == ticketId);
    }
    private void OnCancelTicketEditDialog()
    {
        OpenEditTicketDialog = false;
    }
    private async Task EditTicket()
    {
        await ticketService.UpdateTicketAsync(ticketObject);
        OpenEditTicketDialog = false;
        ticketObject = new Ticket();
        StateHasChanged();
    }

    /* Ticket Delete Logic */
    private Boolean OpenDeleteTicketDialog { get; set; }
    private void OnOpenTicketDeleteDialog(Guid ticketId)
    {
        OpenDeleteTicketDialog = true;
        TicketId = ticketId;
    }
    private void OnCancelTicketDeleteDialog()
    {
        OpenDeleteTicketDialog = false;
    }
    private async Task DeleteTicket()
    {
        await ticketService.DeleteTicketByIdAsync(TicketId);
        OpenDeleteTicketDialog = false;
        await loadTicketData();
        StateHasChanged();
    }
}
