@page "/register-user/{UserRole}"
@using Osiris.Data
@inject UserService userService
@inject CompanyService companyService
@inject NavigationManager NavigationManager

@if (companyListObj is null)
{
    <LoadingSpinner />
}
else
{
    <div class="div-center-container">
        <div class="register-card-container">
            <div class="row mb-3">
                <div class="col-2">
                    <div class="back-button-container" style="display: inline">
                        <div class="oi oi-chevron-left" @onclick="GoBack" style="color: #fff;" />
                    </div>
                </div>
                <div class="col">
                    <h3>Register User</h3>
                </div>
                <div class="col">
                    <button type="button" class="button btn-outlined" @onclick="BackToLogin">Back to Login</button>
                    @if (UserRole.Equals("admin"))
                    {
                        <button type="button" class="button btn-outlined mx-3" @onclick="BackToCompany">Back to Create Company</button>
                    }
                </div>
            </div>
            <EditForm Model="userObject" OnValidSubmit="@CreateUser">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label for="Name" class="control-label">Name</label>
                    <InputText @bind-Value="userObject.Name"></InputText>
                    <ValidationMessage For="@(() => userObject.Name)" />
                </div>
                <div class="form-group">
                    <label for="Email" class="control-label">Email</label>
                    <InputText type="email" @bind-Value="userObject.Email"></InputText>
                    <ValidationMessage For="@(() => userObject.Email)" />
                </div>
                <div class="form-group">
                    <label for="Password" class="control-label">Password</label>
                    <InputText type="password" @bind-Value="userObject.Password"></InputText>
                    <ValidationMessage For="@(() => userObject.Password)" />
                </div>
                <div class="form-group">
                    <label for="Designation" class="control-label">User Type</label>
                    <InputSelect @bind-Value="@userObject.Designation">
                        @if (UserRole.Equals("admin"))
                         {
                            <option value="" selected disabled hidden>Choose User Type</option>
                            <option value="Admin">Admin</option>
                         }
                         else if (UserRole.Equals("collaborator")) {
                            <option value="" selected disabled hidden>Choose User Type</option>
                            <option value="Collaborator">Collaborator</option>
                         }
                    </InputSelect>
                    <ValidationMessage For="@(() => userObject.Designation)" />
                </div>
                <div class="form-group">
                    <label for="Company" class="control-label">Company</label>
                    <InputSelect @bind-Value="@userObject.CompanyId">
                        <option value="" selected disabled hidden>Choose a Company</option>
                        @foreach (var company in companyListObj)
                            {
                            <option value="@company.CompanyId">@company.Name</option>
                            }
                    </InputSelect>
                    <ValidationMessage For="@(() => userObject.Designation)" />
                </div>
                <button type="submit" class="button btn-main">Add</button>
            </EditForm>
            @if (notPrivileged)
            {
                <div class="modal fade show" id="emailConsistModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h4 class="modal-title">Registration Error</h4>
                            </div>

                            <div class="modal-body">
                                This email already registered to the system
                            </div>

                            <div class="modal-footer">
                                <button type="button" class="button btn-outlined" @onclick="@onCancelRegister">Cancel</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [CascadingParameter] public App MyApp { get; set; }
    User userObject = new User();
    List<User> userListObj;
    List<Company> companyListObj;

    [Parameter]
    public String UserRole {get; set; }

    private Boolean notPrivileged = false;
    private Boolean loginInitialized = false;

    private async Task loadCompanyData()
    {
        companyListObj = await Task.Run(() => companyService.GetAllCompaniesAsync());
        StateHasChanged();
    }
    private async Task loadUserData()
    {
        userListObj = await Task.Run(() => userService.GetAllUsersAsync());
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await loadUserData();
        await loadCompanyData();
    }

    private void LoginInitialized()
    {
        @if (userObject.Designation.Equals("Admin"))
        {
            NavigationManager.NavigateTo("/home");
            MyApp.SetLayout(typeof(AdminView));
        }
        else if (userObject.Designation.Equals("Collaborator"))
        {
            NavigationManager.NavigateTo("/home");
            MyApp.SetLayout(typeof(CollaboratorView));
        }
    }
    private async void CreateUser()
    {
        var emailDuplicate = userListObj.FirstOrDefault(data => data.Email == userObject.Email);
        if(emailDuplicate is null)
        {
            await userService.AddUserAsync(userObject);
            LoginInitialized();
        } else
        {
            notPrivileged = true;
        }
    }

    private void BackToLogin()
    {
        NavigationManager.NavigateTo("/");
    }
    private void BackToCompany()
    {
        NavigationManager.NavigateTo("/register-company");
    }

    private void onCancelRegister()
    {
        notPrivileged = false;
        NavigationManager.NavigateTo("/register-user");
    }
    private void GoBack()
    {
        NavigationManager.NavigateTo("/user-role");
    }
}
